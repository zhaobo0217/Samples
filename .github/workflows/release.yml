name: Android Release

on:
  release:
    types: [published]

jobs:
  assmbleRelease:
    name: Assmble release
    runs-on: ubuntu-latest
    env:
      BUILD_NAME: release
      CHANNELS: qq,baidu,taobao,meizu,xiachufang,lenovo,vivo,xiaomi,huawei,oppo,samsung
      OUTPUT_DIR: final_apks
      CHECKOUT_REF: dev
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.CHECKOUT_REF }}
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      # https://github.com/burrunan/gradle-cache-action
      - uses: burrunan/gradle-cache-action@v1
        name: Cache gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build & Assemble
        env:
          VERSION_NAME: ${{ github.event.release.tag_name }}
        run: |
          versionTag=$VERSION_NAME
          versionArray=(${versionTag//@/ })
          variantName=${{env.BUILD_NAME}}
          variantType=`echo ${variantName:0:1} | tr  '[a-z]' '[A-Z]'`${variantName:1}
          echo "variantType:$variantType"
          bash gradlew --no-daemon clean assemble${variantType} -PversionName=${versionArray[0]} -PversionCode=${versionArray[1]}
      - uses: kevin-david/zipalign-sign-android-release@v1.1
        name: Sign debug app APK
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/${{env.BUILD_NAME}}
          signingKeyBase64: ${{ secrets.KEY_STORE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          zipAlign: true
        env:
          BUILD_TOOLS_VERSION: "30.0.2"
      - name: Write channels
        env:
          WALLE_JAR_PATH: "${{ github.workspace }}/buildscript/walle-cli-all.jar"
          APK_PATH: ${{steps.sign_app.outputs.signedReleaseFile}}
        run: |
          mkdir $OUTPUT_DIR
          python buildscript/write_channel.py gen -w $WALLE_JAR_PATH -i $APK_PATH -o $OUTPUT_DIR -c $CHANNELS
      - name: Compress outputs
        run: |
          zipName="$OUTPUT_DIR.zip"
          cp app/build/outputs/mapping/*/mapping.txt $OUTPUT_DIR
          zip -r $zipName $OUTPUT_DIR
          echo "zip success:$zipName"
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: ${{ format('{0}.zip', env.OUTPUT_DIR) }}
          repo-token: ${{ github.token }}
          release-tag: ${{ github.event.release.tag_name}}
    outputs:
      job-status: ${{ job.status }}
  assmbleGoogle:
    name: Assmble google
    runs-on: ubuntu-latest
    env:
      BUILD_NAME: release
      CHECKOUT_REF: dev
      OUTPUT_DIR: google_apk
      CHANNELS: androidmarket
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.CHECKOUT_REF }}
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Build & Assemble
        env:
          VERSION_NAME: ${{ github.event.release.tag_name }}
        run: |
          versionTag=$VERSION_NAME
          versionArray=(${versionTag//@/ })
          variantName=${{env.BUILD_NAME}}
          variantType=`echo ${variantName:0:1} | tr  '[a-z]' '[A-Z]'`${variantName:1}
          echo "google variantType:$variantType"
          vName=${versionArray[0]}
          vCode=${versionArray[1]}
          googleParam=" -PisAndroidMarket=true"
          echo "version info:$vName;$vCode"
          bash gradlew --no-daemon clean assemble${variantType} -PversionName=${versionArray[0]} -PversionCode=${versionArray[1]}
      - name: Write channels
        env:
          WALLE_JAR_PATH: "${{ github.workspace }}/buildscript/walle-cli-all.jar"
          APK_PATH: ${{steps.sign_app.outputs.signedReleaseFile}}
        run: |
          mkdir $OUTPUT_DIR
          python buildscript/write_channel.py gen -w $WALLE_JAR_PATH -i $APK_PATH -o $OUTPUT_DIR -c $CHANNELS
        - name: Compress outputs
          run: |
            zipName="$OUTPUT_DIR.zip"
            cp app/build/outputs/mapping/*/mapping.txt $OUTPUT_DIR
            zip -r $zipName $OUTPUT_DIR
            echo "zip success:$zipName"
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: ${{ format('{0}.zip', env.OUTPUT_DIR) }}
          repo-token: ${{ github.token }}
          release-tag: ${{ github.event.release.tag_name}}

    outputs:
      job-status: ${{ job.status }}

  notification:
    name: Lark notification
    runs-on: ubuntu-latest
    needs: [assmbleRelease, assmbleGoogle]
    if: ${{ success() }}
    steps:
      - name: Lark notifacation
        env:
          PROJECT: "下厨房"
          TITLE: ${{ github.event.release.tag_name }}
          CONTENT: ${{ github.event.release.body }}
          DATE: ${{ github.event.release.published_at }}
          AUTHOR: ${{ github.event.release.author.login }}
          HTML_URL: ${{ github.event.release.html_url }}
          REFS: ${{ github.head_ref }}
          ASSETS_URL: ${{ github.event.release.assets_url }}
        run: |
          title="当前的release版本：$TITLE"
          describe=$CONTENT
          if [ -z "$describe" ]; then
              describe="release描述为null"
          fi
          type="release打包（正式环境所有的包Asserts）"
          echo "lark success.\n $describe"
          # python buildscript/lark_notification.py -p "$PROJECT" -t "$title" -c "$describe" -a "$AUTHOR" -y "$type" -r "$REFS" -d "$DATE" -u "$HTML_URL" -b "$ASSETS_URL"
    outputs:
      job-status: ${{ job.status }}
